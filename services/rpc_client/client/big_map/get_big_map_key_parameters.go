// Code generated by go-swagger; DO NOT EDIT.

package big_map

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBigMapKeyParams creates a new GetBigMapKeyParams object
// with the default values initialized.
func NewGetBigMapKeyParams() *GetBigMapKeyParams {
	var ()
	return &GetBigMapKeyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBigMapKeyParamsWithTimeout creates a new GetBigMapKeyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBigMapKeyParamsWithTimeout(timeout time.Duration) *GetBigMapKeyParams {
	var ()
	return &GetBigMapKeyParams{

		timeout: timeout,
	}
}

// NewGetBigMapKeyParamsWithContext creates a new GetBigMapKeyParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBigMapKeyParamsWithContext(ctx context.Context) *GetBigMapKeyParams {
	var ()
	return &GetBigMapKeyParams{

		Context: ctx,
	}
}

// NewGetBigMapKeyParamsWithHTTPClient creates a new GetBigMapKeyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBigMapKeyParamsWithHTTPClient(client *http.Client) *GetBigMapKeyParams {
	var ()
	return &GetBigMapKeyParams{
		HTTPClient: client,
	}
}

/*GetBigMapKeyParams contains all the parameters to send to the API endpoint
for the get big map key operation typically these are written to a http.Request
*/
type GetBigMapKeyParams struct {

	/*BigMapID*/
	BigMapID int64
	/*KeyHash*/
	KeyHash string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get big map key params
func (o *GetBigMapKeyParams) WithTimeout(timeout time.Duration) *GetBigMapKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get big map key params
func (o *GetBigMapKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get big map key params
func (o *GetBigMapKeyParams) WithContext(ctx context.Context) *GetBigMapKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get big map key params
func (o *GetBigMapKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get big map key params
func (o *GetBigMapKeyParams) WithHTTPClient(client *http.Client) *GetBigMapKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get big map key params
func (o *GetBigMapKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBigMapID adds the bigMapID to the get big map key params
func (o *GetBigMapKeyParams) WithBigMapID(bigMapID int64) *GetBigMapKeyParams {
	o.SetBigMapID(bigMapID)
	return o
}

// SetBigMapID adds the bigMapId to the get big map key params
func (o *GetBigMapKeyParams) SetBigMapID(bigMapID int64) {
	o.BigMapID = bigMapID
}

// WithKeyHash adds the keyHash to the get big map key params
func (o *GetBigMapKeyParams) WithKeyHash(keyHash string) *GetBigMapKeyParams {
	o.SetKeyHash(keyHash)
	return o
}

// SetKeyHash adds the keyHash to the get big map key params
func (o *GetBigMapKeyParams) SetKeyHash(keyHash string) {
	o.KeyHash = keyHash
}

// WriteToRequest writes these params to a swagger request
func (o *GetBigMapKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param big_map_id
	if err := r.SetPathParam("big_map_id", swag.FormatInt64(o.BigMapID)); err != nil {
		return err
	}

	// path param key_hash
	if err := r.SetPathParam("key_hash", o.KeyHash); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
